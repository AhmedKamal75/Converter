/* Generated By:JavaCC: Do not edit this line. converter.java */
package code;

import java.io.StringReader;

public class converter implements converterConstants {

    public static void main(String[] args) throws Exception {
        StringReader in=new StringReader("ADD PARAGRAPH WITH TEXT \u005c"Welcome\u005c" AND WITH FONT \u005c"Arial\u005c" AND WITH COLOR \u005c"Red\u005c"");
        converter converter=new converter(in);
        System.out.println(in);
        converter.words();
    }

  static final public String words() throws ParseException {
    int id=0;
    String html="";
    Token T;
    html = createElement();
    jj_consume_token(0);
    System.out.println("correct command");
    System.out.println(html);
    {if (true) return html;}
    throw new Error("Missing return statement in function");
  }

  static final public String createElement() throws ParseException {
 Token T;String hl;String html="";
    jj_consume_token(create);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case img:
      T = jj_consume_token(img);
      hl = image();
     html=T.image;html=html.replaceAll("IMAGE", "<img").replaceAll("WITH SOURCE", "src=")+hl;{if (true) return html;}
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case header:
      T = jj_consume_token(header);
      hl = decorated();
     html=T.image;html=html.replaceAll("HEADING", "<h1 ")+hl+" </h1 >";
    {if (true) return html;}
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case para:
      T = jj_consume_token(para);
      hl = decorated();
     html=T.image;html=html.replaceAll("PARAGRAPH", "<p ")+hl+" </p>";{if (true) return html;}
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case url:
      T = jj_consume_token(url);
      hl = decorated();
     html=T.image;html=html.replaceAll("LINK", "<a")+hl+" </a>";{if (true) return html;}
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

  static final public String image() throws ParseException {
                  Token T;String html="";
    jj_consume_token(quote);
    T = jj_consume_token(sentence);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case sentence:
      jj_consume_token(sentence);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(quote);
            html=html + "\u005c""+T.image+ "\u005c"";
            html = html + "/>";
            {if (true) return html;}
    throw new Error("Missing return statement in function");
  }

  static final public String decorated() throws ParseException {
    Token T;
    String html="";String ml="";
    html = shape();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case decorated_text:
      jj_consume_token(decorated_text);
      ml = shape();
        if (ml.startsWith("color")||ml.startsWith("font")){
            html=" style=\u005c""+ml+";"+html;
        } else {html=ml+html;}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case decorated_text:
        jj_consume_token(decorated_text);
        ml = decorated();
        if (html.contains("href")&&(ml.startsWith("color")||ml.startsWith("font")))
            {html=html.replaceAll(">"," style=\u005c""+ml+";\u005c">"); }
        else { html=html.replaceAll(">",ml+" \u005c">"); }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
     {if (true) return html;}
    throw new Error("Missing return statement in function");
  }

  static final public String shape() throws ParseException {
                 Token TX;Token S;String html="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case text:
      jj_consume_token(text);
              html +=  " \u005c">" ;
      break;
    case color:
      jj_consume_token(color);
              html +=  "color:" ;
      break;
    case font:
      jj_consume_token(font);
              html +=  "font-family:" ;
      break;
    case link:
      TX = jj_consume_token(link);
                html =  " href=" ;
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(quote);
    S = jj_consume_token(sentence);
    jj_consume_token(quote);
     if (!html.contains(" \u005c">")) {html=html+"\u005c""+S.image+"\u005c""; }
    else {html=html.replace(" \u005c">",">")+S.image; }
    {if (true) return html;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public converterTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x40,0x80,0x100,0x4000,0x200,0x200,0x3c00,};
   }

  /** Constructor with InputStream. */
  public converter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public converter(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new converterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public converter(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new converterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public converter(converterTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(converterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
